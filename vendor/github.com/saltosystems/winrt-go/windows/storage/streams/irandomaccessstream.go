// Code generated by winrt-go-gen. DO NOT EDIT.

//go:build windows

//nolint:all
package streams

import (
	"syscall"
	"unsafe"

	"github.com/go-ole/go-ole"
)

const GUIDIRandomAccessStream string = "905a0fe1-bc53-11df-8c49-001e4fc686da"
const SignatureIRandomAccessStream string = "{905a0fe1-bc53-11df-8c49-001e4fc686da}"

type IRandomAccessStream struct {
	ole.IInspectable
}

type IRandomAccessStreamVtbl struct {
	ole.IInspectableVtbl

	GetSize           uintptr
	SetSize           uintptr
	GetInputStreamAt  uintptr
	GetOutputStreamAt uintptr
	GetPosition       uintptr
	Seek              uintptr
	CloneStream       uintptr
	GetCanRead        uintptr
	GetCanWrite       uintptr
}

func (v *IRandomAccessStream) VTable() *IRandomAccessStreamVtbl {
	return (*IRandomAccessStreamVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *IRandomAccessStream) GetSize() (uint64, error) {
	var out uint64
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetSize,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out uint64
	)

	if hr != 0 {
		return 0, ole.NewError(hr)
	}

	return out, nil
}

func (v *IRandomAccessStream) SetSize(value uint64) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetSize,
		uintptr(unsafe.Pointer(v)), // this
		uintptr(value),             // in uint64
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *IRandomAccessStream) GetInputStreamAt(position uint64) (*IInputStream, error) {
	var out *IInputStream
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetInputStreamAt,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(position),             // in uint64
		uintptr(unsafe.Pointer(&out)), // out IInputStream
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IRandomAccessStream) GetOutputStreamAt(position uint64) (*IOutputStream, error) {
	var out *IOutputStream
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetOutputStreamAt,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(position),             // in uint64
		uintptr(unsafe.Pointer(&out)), // out IOutputStream
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IRandomAccessStream) GetPosition() (uint64, error) {
	var out uint64
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetPosition,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out uint64
	)

	if hr != 0 {
		return 0, ole.NewError(hr)
	}

	return out, nil
}

func (v *IRandomAccessStream) Seek(position uint64) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().Seek,
		uintptr(unsafe.Pointer(v)), // this
		uintptr(position),          // in uint64
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *IRandomAccessStream) CloneStream() (*IRandomAccessStream, error) {
	var out *IRandomAccessStream
	hr, _, _ := syscall.SyscallN(
		v.VTable().CloneStream,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out IRandomAccessStream
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IRandomAccessStream) GetCanRead() (bool, error) {
	var out bool
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetCanRead,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out bool
	)

	if hr != 0 {
		return false, ole.NewError(hr)
	}

	return out, nil
}

func (v *IRandomAccessStream) GetCanWrite() (bool, error) {
	var out bool
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetCanWrite,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out bool
	)

	if hr != 0 {
		return false, ole.NewError(hr)
	}

	return out, nil
}
