// Code generated by winrt-go-gen. DO NOT EDIT.

//go:build windows

//nolint:all
package backgroundtransfer

import (
	"syscall"
	"unsafe"

	"github.com/go-ole/go-ole"
)

const SignatureBackgroundTransferGroup string = "rc(Windows.Networking.BackgroundTransfer.BackgroundTransferGroup;{d8c3e3e4-6459-4540-85eb-aaa1c8903677})"

type BackgroundTransferGroup struct {
	ole.IUnknown
}

func (impl *BackgroundTransferGroup) GetName() (string, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiBackgroundTransferGroup))
	defer itf.Release()
	v := (*iBackgroundTransferGroup)(unsafe.Pointer(itf))
	return v.GetName()
}

func (impl *BackgroundTransferGroup) GetTransferBehavior() (BackgroundTransferBehavior, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiBackgroundTransferGroup))
	defer itf.Release()
	v := (*iBackgroundTransferGroup)(unsafe.Pointer(itf))
	return v.GetTransferBehavior()
}

func (impl *BackgroundTransferGroup) SetTransferBehavior(value BackgroundTransferBehavior) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiBackgroundTransferGroup))
	defer itf.Release()
	v := (*iBackgroundTransferGroup)(unsafe.Pointer(itf))
	return v.SetTransferBehavior(value)
}

const GUIDiBackgroundTransferGroup string = "d8c3e3e4-6459-4540-85eb-aaa1c8903677"
const SignatureiBackgroundTransferGroup string = "{d8c3e3e4-6459-4540-85eb-aaa1c8903677}"

type iBackgroundTransferGroup struct {
	ole.IInspectable
}

type iBackgroundTransferGroupVtbl struct {
	ole.IInspectableVtbl

	GetName             uintptr
	GetTransferBehavior uintptr
	SetTransferBehavior uintptr
}

func (v *iBackgroundTransferGroup) VTable() *iBackgroundTransferGroupVtbl {
	return (*iBackgroundTransferGroupVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *iBackgroundTransferGroup) GetName() (string, error) {
	var outHStr ole.HString
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetName,
		uintptr(unsafe.Pointer(v)),        // this
		uintptr(unsafe.Pointer(&outHStr)), // out string
	)

	if hr != 0 {
		return "", ole.NewError(hr)
	}

	out := outHStr.String()
	ole.DeleteHString(outHStr)
	return out, nil
}

func (v *iBackgroundTransferGroup) GetTransferBehavior() (BackgroundTransferBehavior, error) {
	var out BackgroundTransferBehavior
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetTransferBehavior,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out BackgroundTransferBehavior
	)

	if hr != 0 {
		return BackgroundTransferBehaviorParallel, ole.NewError(hr)
	}

	return out, nil
}

func (v *iBackgroundTransferGroup) SetTransferBehavior(value BackgroundTransferBehavior) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetTransferBehavior,
		uintptr(unsafe.Pointer(v)), // this
		uintptr(value),             // in BackgroundTransferBehavior
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

const GUIDiBackgroundTransferGroupStatics string = "02ec50b2-7d18-495b-aa22-32a97d45d3e2"
const SignatureiBackgroundTransferGroupStatics string = "{02ec50b2-7d18-495b-aa22-32a97d45d3e2}"

type iBackgroundTransferGroupStatics struct {
	ole.IInspectable
}

type iBackgroundTransferGroupStaticsVtbl struct {
	ole.IInspectableVtbl

	BackgroundTransferGroupCreateGroup uintptr
}

func (v *iBackgroundTransferGroupStatics) VTable() *iBackgroundTransferGroupStaticsVtbl {
	return (*iBackgroundTransferGroupStaticsVtbl)(unsafe.Pointer(v.RawVTable))
}

func BackgroundTransferGroupCreateGroup(name string) (*BackgroundTransferGroup, error) {
	inspectable, err := ole.RoGetActivationFactory("Windows.Networking.BackgroundTransfer.BackgroundTransferGroup", ole.NewGUID(GUIDiBackgroundTransferGroupStatics))
	if err != nil {
		return nil, err
	}
	v := (*iBackgroundTransferGroupStatics)(unsafe.Pointer(inspectable))

	var out *BackgroundTransferGroup
	nameHStr, err := ole.NewHString(name)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().BackgroundTransferGroupCreateGroup,
		0,                             // this is a static func, so there's no this
		uintptr(nameHStr),             // in string
		uintptr(unsafe.Pointer(&out)), // out BackgroundTransferGroup
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}
