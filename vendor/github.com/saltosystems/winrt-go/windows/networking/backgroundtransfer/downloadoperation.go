// Code generated by winrt-go-gen. DO NOT EDIT.

//go:build windows

//nolint:all
package backgroundtransfer

import (
	"syscall"
	"unsafe"

	"github.com/go-ole/go-ole"
	"github.com/saltosystems/winrt-go/windows/foundation"
	"github.com/saltosystems/winrt-go/windows/foundation/collections"
	"github.com/saltosystems/winrt-go/windows/storage"
	"github.com/saltosystems/winrt-go/windows/storage/streams"
)

const SignatureDownloadOperation string = "rc(Windows.Networking.BackgroundTransfer.DownloadOperation;{bd87ebb0-5714-4e09-ba68-bef73903b0d7})"

type DownloadOperation struct {
	ole.IUnknown
}

func (impl *DownloadOperation) GetResultFile() (*storage.IStorageFile, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiDownloadOperation))
	defer itf.Release()
	v := (*iDownloadOperation)(unsafe.Pointer(itf))
	return v.GetResultFile()
}

func (impl *DownloadOperation) GetProgress() (BackgroundDownloadProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiDownloadOperation))
	defer itf.Release()
	v := (*iDownloadOperation)(unsafe.Pointer(itf))
	return v.GetProgress()
}

func (impl *DownloadOperation) StartAsync() (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiDownloadOperation))
	defer itf.Release()
	v := (*iDownloadOperation)(unsafe.Pointer(itf))
	return v.StartAsync()
}

func (impl *DownloadOperation) AttachAsync() (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiDownloadOperation))
	defer itf.Release()
	v := (*iDownloadOperation)(unsafe.Pointer(itf))
	return v.AttachAsync()
}

func (impl *DownloadOperation) Pause() error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiDownloadOperation))
	defer itf.Release()
	v := (*iDownloadOperation)(unsafe.Pointer(itf))
	return v.Pause()
}

func (impl *DownloadOperation) Resume() error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiDownloadOperation))
	defer itf.Release()
	v := (*iDownloadOperation)(unsafe.Pointer(itf))
	return v.Resume()
}

func (impl *DownloadOperation) GetGuid() (syscall.GUID, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDIBackgroundTransferOperation))
	defer itf.Release()
	v := (*IBackgroundTransferOperation)(unsafe.Pointer(itf))
	return v.GetGuid()
}

func (impl *DownloadOperation) GetRequestedUri() (*foundation.Uri, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDIBackgroundTransferOperation))
	defer itf.Release()
	v := (*IBackgroundTransferOperation)(unsafe.Pointer(itf))
	return v.GetRequestedUri()
}

func (impl *DownloadOperation) GetMethod() (string, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDIBackgroundTransferOperation))
	defer itf.Release()
	v := (*IBackgroundTransferOperation)(unsafe.Pointer(itf))
	return v.GetMethod()
}

func (impl *DownloadOperation) GetGroup() (string, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDIBackgroundTransferOperation))
	defer itf.Release()
	v := (*IBackgroundTransferOperation)(unsafe.Pointer(itf))
	return v.GetGroup()
}

func (impl *DownloadOperation) GetCostPolicy() (BackgroundTransferCostPolicy, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDIBackgroundTransferOperation))
	defer itf.Release()
	v := (*IBackgroundTransferOperation)(unsafe.Pointer(itf))
	return v.GetCostPolicy()
}

func (impl *DownloadOperation) SetCostPolicy(value BackgroundTransferCostPolicy) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDIBackgroundTransferOperation))
	defer itf.Release()
	v := (*IBackgroundTransferOperation)(unsafe.Pointer(itf))
	return v.SetCostPolicy(value)
}

func (impl *DownloadOperation) GetResultStreamAt(position uint64) (*streams.IInputStream, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDIBackgroundTransferOperation))
	defer itf.Release()
	v := (*IBackgroundTransferOperation)(unsafe.Pointer(itf))
	return v.GetResultStreamAt(position)
}

func (impl *DownloadOperation) GetResponseInformation() (*ResponseInformation, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDIBackgroundTransferOperation))
	defer itf.Release()
	v := (*IBackgroundTransferOperation)(unsafe.Pointer(itf))
	return v.GetResponseInformation()
}

func (impl *DownloadOperation) GetPriority() (BackgroundTransferPriority, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDIBackgroundTransferOperationPriority))
	defer itf.Release()
	v := (*IBackgroundTransferOperationPriority)(unsafe.Pointer(itf))
	return v.GetPriority()
}

func (impl *DownloadOperation) SetPriority(value BackgroundTransferPriority) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDIBackgroundTransferOperationPriority))
	defer itf.Release()
	v := (*IBackgroundTransferOperationPriority)(unsafe.Pointer(itf))
	return v.SetPriority(value)
}

func (impl *DownloadOperation) GetTransferGroup() (*BackgroundTransferGroup, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiDownloadOperation2))
	defer itf.Release()
	v := (*iDownloadOperation2)(unsafe.Pointer(itf))
	return v.GetTransferGroup()
}

func (impl *DownloadOperation) GetIsRandomAccessRequired() (bool, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiDownloadOperation3))
	defer itf.Release()
	v := (*iDownloadOperation3)(unsafe.Pointer(itf))
	return v.GetIsRandomAccessRequired()
}

func (impl *DownloadOperation) SetIsRandomAccessRequired(value bool) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiDownloadOperation3))
	defer itf.Release()
	v := (*iDownloadOperation3)(unsafe.Pointer(itf))
	return v.SetIsRandomAccessRequired(value)
}

func (impl *DownloadOperation) GetResultRandomAccessStreamReference() (*streams.IRandomAccessStreamReference, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiDownloadOperation3))
	defer itf.Release()
	v := (*iDownloadOperation3)(unsafe.Pointer(itf))
	return v.GetResultRandomAccessStreamReference()
}

func (impl *DownloadOperation) GetDownloadedRanges() (*collections.IVector, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiDownloadOperation3))
	defer itf.Release()
	v := (*iDownloadOperation3)(unsafe.Pointer(itf))
	return v.GetDownloadedRanges()
}

func (impl *DownloadOperation) AddRangesDownloaded(eventHandler *foundation.TypedEventHandler) (foundation.EventRegistrationToken, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiDownloadOperation3))
	defer itf.Release()
	v := (*iDownloadOperation3)(unsafe.Pointer(itf))
	return v.AddRangesDownloaded(eventHandler)
}

func (impl *DownloadOperation) RemoveRangesDownloaded(eventCookie foundation.EventRegistrationToken) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiDownloadOperation3))
	defer itf.Release()
	v := (*iDownloadOperation3)(unsafe.Pointer(itf))
	return v.RemoveRangesDownloaded(eventCookie)
}

func (impl *DownloadOperation) SetRequestedUri(value *foundation.Uri) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiDownloadOperation3))
	defer itf.Release()
	v := (*iDownloadOperation3)(unsafe.Pointer(itf))
	return v.SetRequestedUri(value)
}

func (impl *DownloadOperation) GetRecoverableWebErrorStatuses() (*collections.IVector, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiDownloadOperation3))
	defer itf.Release()
	v := (*iDownloadOperation3)(unsafe.Pointer(itf))
	return v.GetRecoverableWebErrorStatuses()
}

func (impl *DownloadOperation) GetCurrentWebErrorStatus() (*foundation.IReference, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiDownloadOperation3))
	defer itf.Release()
	v := (*iDownloadOperation3)(unsafe.Pointer(itf))
	return v.GetCurrentWebErrorStatus()
}

func (impl *DownloadOperation) MakeCurrentInTransferGroup() error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiDownloadOperation4))
	defer itf.Release()
	v := (*iDownloadOperation4)(unsafe.Pointer(itf))
	return v.MakeCurrentInTransferGroup()
}

func (impl *DownloadOperation) SetRequestHeader(headerName string, headerValue string) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiDownloadOperation5))
	defer itf.Release()
	v := (*iDownloadOperation5)(unsafe.Pointer(itf))
	return v.SetRequestHeader(headerName, headerValue)
}

func (impl *DownloadOperation) RemoveRequestHeader(headerName string) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiDownloadOperation5))
	defer itf.Release()
	v := (*iDownloadOperation5)(unsafe.Pointer(itf))
	return v.RemoveRequestHeader(headerName)
}

const GUIDiDownloadOperation string = "bd87ebb0-5714-4e09-ba68-bef73903b0d7"
const SignatureiDownloadOperation string = "{bd87ebb0-5714-4e09-ba68-bef73903b0d7}"

type iDownloadOperation struct {
	ole.IInspectable
}

type iDownloadOperationVtbl struct {
	ole.IInspectableVtbl

	GetResultFile uintptr
	GetProgress   uintptr
	StartAsync    uintptr
	AttachAsync   uintptr
	Pause         uintptr
	Resume        uintptr
}

func (v *iDownloadOperation) VTable() *iDownloadOperationVtbl {
	return (*iDownloadOperationVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *iDownloadOperation) GetResultFile() (*storage.IStorageFile, error) {
	var out *storage.IStorageFile
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetResultFile,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out storage.IStorageFile
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iDownloadOperation) GetProgress() (BackgroundDownloadProgress, error) {
	var out BackgroundDownloadProgress
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetProgress,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out BackgroundDownloadProgress
	)

	if hr != 0 {
		return BackgroundDownloadProgress{}, ole.NewError(hr)
	}

	return out, nil
}

func (v *iDownloadOperation) StartAsync() (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	hr, _, _ := syscall.SyscallN(
		v.VTable().StartAsync,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iDownloadOperation) AttachAsync() (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	hr, _, _ := syscall.SyscallN(
		v.VTable().AttachAsync,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iDownloadOperation) Pause() error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().Pause,
		uintptr(unsafe.Pointer(v)), // this
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iDownloadOperation) Resume() error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().Resume,
		uintptr(unsafe.Pointer(v)), // this
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

const GUIDiDownloadOperation2 string = "a3cced40-8f9c-4353-9cd4-290dee387c38"
const SignatureiDownloadOperation2 string = "{a3cced40-8f9c-4353-9cd4-290dee387c38}"

type iDownloadOperation2 struct {
	ole.IInspectable
}

type iDownloadOperation2Vtbl struct {
	ole.IInspectableVtbl

	GetTransferGroup uintptr
}

func (v *iDownloadOperation2) VTable() *iDownloadOperation2Vtbl {
	return (*iDownloadOperation2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *iDownloadOperation2) GetTransferGroup() (*BackgroundTransferGroup, error) {
	var out *BackgroundTransferGroup
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetTransferGroup,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out BackgroundTransferGroup
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

const GUIDiDownloadOperation3 string = "5027351c-7d5e-4adc-b8d3-df5c6031b9cc"
const SignatureiDownloadOperation3 string = "{5027351c-7d5e-4adc-b8d3-df5c6031b9cc}"

type iDownloadOperation3 struct {
	ole.IInspectable
}

type iDownloadOperation3Vtbl struct {
	ole.IInspectableVtbl

	GetIsRandomAccessRequired            uintptr
	SetIsRandomAccessRequired            uintptr
	GetResultRandomAccessStreamReference uintptr
	GetDownloadedRanges                  uintptr
	AddRangesDownloaded                  uintptr
	RemoveRangesDownloaded               uintptr
	SetRequestedUri                      uintptr
	GetRecoverableWebErrorStatuses       uintptr
	GetCurrentWebErrorStatus             uintptr
}

func (v *iDownloadOperation3) VTable() *iDownloadOperation3Vtbl {
	return (*iDownloadOperation3Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *iDownloadOperation3) GetIsRandomAccessRequired() (bool, error) {
	var out bool
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetIsRandomAccessRequired,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out bool
	)

	if hr != 0 {
		return false, ole.NewError(hr)
	}

	return out, nil
}

func (v *iDownloadOperation3) SetIsRandomAccessRequired(value bool) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetIsRandomAccessRequired,
		uintptr(unsafe.Pointer(v)),                // this
		uintptr(*(*byte)(unsafe.Pointer(&value))), // in bool
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iDownloadOperation3) GetResultRandomAccessStreamReference() (*streams.IRandomAccessStreamReference, error) {
	var out *streams.IRandomAccessStreamReference
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetResultRandomAccessStreamReference,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out streams.IRandomAccessStreamReference
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iDownloadOperation3) GetDownloadedRanges() (*collections.IVector, error) {
	var out *collections.IVector
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetDownloadedRanges,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out collections.IVector
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iDownloadOperation3) AddRangesDownloaded(eventHandler *foundation.TypedEventHandler) (foundation.EventRegistrationToken, error) {
	var out foundation.EventRegistrationToken
	hr, _, _ := syscall.SyscallN(
		v.VTable().AddRangesDownloaded,
		uintptr(unsafe.Pointer(v)),            // this
		uintptr(unsafe.Pointer(eventHandler)), // in foundation.TypedEventHandler
		uintptr(unsafe.Pointer(&out)),         // out foundation.EventRegistrationToken
	)

	if hr != 0 {
		return foundation.EventRegistrationToken{}, ole.NewError(hr)
	}

	return out, nil
}

func (v *iDownloadOperation3) RemoveRangesDownloaded(eventCookie foundation.EventRegistrationToken) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().RemoveRangesDownloaded,
		uintptr(unsafe.Pointer(v)),            // this
		uintptr(unsafe.Pointer(&eventCookie)), // in foundation.EventRegistrationToken
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iDownloadOperation3) SetRequestedUri(value *foundation.Uri) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetRequestedUri,
		uintptr(unsafe.Pointer(v)),     // this
		uintptr(unsafe.Pointer(value)), // in foundation.Uri
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iDownloadOperation3) GetRecoverableWebErrorStatuses() (*collections.IVector, error) {
	var out *collections.IVector
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetRecoverableWebErrorStatuses,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out collections.IVector
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iDownloadOperation3) GetCurrentWebErrorStatus() (*foundation.IReference, error) {
	var out *foundation.IReference
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetCurrentWebErrorStatus,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out foundation.IReference
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

const GUIDiDownloadOperation4 string = "0cdaaef4-8cef-404a-966d-f058400bed80"
const SignatureiDownloadOperation4 string = "{0cdaaef4-8cef-404a-966d-f058400bed80}"

type iDownloadOperation4 struct {
	ole.IInspectable
}

type iDownloadOperation4Vtbl struct {
	ole.IInspectableVtbl

	MakeCurrentInTransferGroup uintptr
}

func (v *iDownloadOperation4) VTable() *iDownloadOperation4Vtbl {
	return (*iDownloadOperation4Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *iDownloadOperation4) MakeCurrentInTransferGroup() error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().MakeCurrentInTransferGroup,
		uintptr(unsafe.Pointer(v)), // this
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

const GUIDiDownloadOperation5 string = "a699a86f-5590-463a-b8d6-1e491a2760a5"
const SignatureiDownloadOperation5 string = "{a699a86f-5590-463a-b8d6-1e491a2760a5}"

type iDownloadOperation5 struct {
	ole.IInspectable
}

type iDownloadOperation5Vtbl struct {
	ole.IInspectableVtbl

	SetRequestHeader    uintptr
	RemoveRequestHeader uintptr
}

func (v *iDownloadOperation5) VTable() *iDownloadOperation5Vtbl {
	return (*iDownloadOperation5Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *iDownloadOperation5) SetRequestHeader(headerName string, headerValue string) error {
	headerNameHStr, err := ole.NewHString(headerName)
	if err != nil {
		return err
	}
	headerValueHStr, err := ole.NewHString(headerValue)
	if err != nil {
		return err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetRequestHeader,
		uintptr(unsafe.Pointer(v)), // this
		uintptr(headerNameHStr),    // in string
		uintptr(headerValueHStr),   // in string
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iDownloadOperation5) RemoveRequestHeader(headerName string) error {
	headerNameHStr, err := ole.NewHString(headerName)
	if err != nil {
		return err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().RemoveRequestHeader,
		uintptr(unsafe.Pointer(v)), // this
		uintptr(headerNameHStr),    // in string
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}
