// Code generated by winrt-go-gen. DO NOT EDIT.

//go:build windows

//nolint:all
package playback

import (
	"syscall"
	"unsafe"

	"github.com/go-ole/go-ole"
	"github.com/saltosystems/winrt-go/windows/foundation"
	"github.com/saltosystems/winrt-go/windows/foundation/collections"
)

const SignatureMediaPlaybackList string = "rc(Windows.Media.Playback.MediaPlaybackList;{7f77ee9c-dc42-4e26-a98d-7850df8ec925})"

type MediaPlaybackList struct {
	ole.IUnknown
}

func NewMediaPlaybackList() (*MediaPlaybackList, error) {
	inspectable, err := ole.RoActivateInstance("Windows.Media.Playback.MediaPlaybackList")
	if err != nil {
		return nil, err
	}
	return (*MediaPlaybackList)(unsafe.Pointer(inspectable)), nil
}

func (impl *MediaPlaybackList) AddItemFailed(handler *foundation.TypedEventHandler) (foundation.EventRegistrationToken, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaPlaybackList))
	defer itf.Release()
	v := (*iMediaPlaybackList)(unsafe.Pointer(itf))
	return v.AddItemFailed(handler)
}

func (impl *MediaPlaybackList) RemoveItemFailed(token foundation.EventRegistrationToken) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaPlaybackList))
	defer itf.Release()
	v := (*iMediaPlaybackList)(unsafe.Pointer(itf))
	return v.RemoveItemFailed(token)
}

func (impl *MediaPlaybackList) AddCurrentItemChanged(handler *foundation.TypedEventHandler) (foundation.EventRegistrationToken, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaPlaybackList))
	defer itf.Release()
	v := (*iMediaPlaybackList)(unsafe.Pointer(itf))
	return v.AddCurrentItemChanged(handler)
}

func (impl *MediaPlaybackList) RemoveCurrentItemChanged(token foundation.EventRegistrationToken) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaPlaybackList))
	defer itf.Release()
	v := (*iMediaPlaybackList)(unsafe.Pointer(itf))
	return v.RemoveCurrentItemChanged(token)
}

func (impl *MediaPlaybackList) AddItemOpened(handler *foundation.TypedEventHandler) (foundation.EventRegistrationToken, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaPlaybackList))
	defer itf.Release()
	v := (*iMediaPlaybackList)(unsafe.Pointer(itf))
	return v.AddItemOpened(handler)
}

func (impl *MediaPlaybackList) RemoveItemOpened(token foundation.EventRegistrationToken) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaPlaybackList))
	defer itf.Release()
	v := (*iMediaPlaybackList)(unsafe.Pointer(itf))
	return v.RemoveItemOpened(token)
}

func (impl *MediaPlaybackList) GetItems() (*collections.IObservableVector, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaPlaybackList))
	defer itf.Release()
	v := (*iMediaPlaybackList)(unsafe.Pointer(itf))
	return v.GetItems()
}

func (impl *MediaPlaybackList) GetAutoRepeatEnabled() (bool, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaPlaybackList))
	defer itf.Release()
	v := (*iMediaPlaybackList)(unsafe.Pointer(itf))
	return v.GetAutoRepeatEnabled()
}

func (impl *MediaPlaybackList) SetAutoRepeatEnabled(value bool) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaPlaybackList))
	defer itf.Release()
	v := (*iMediaPlaybackList)(unsafe.Pointer(itf))
	return v.SetAutoRepeatEnabled(value)
}

func (impl *MediaPlaybackList) GetShuffleEnabled() (bool, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaPlaybackList))
	defer itf.Release()
	v := (*iMediaPlaybackList)(unsafe.Pointer(itf))
	return v.GetShuffleEnabled()
}

func (impl *MediaPlaybackList) SetShuffleEnabled(value bool) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaPlaybackList))
	defer itf.Release()
	v := (*iMediaPlaybackList)(unsafe.Pointer(itf))
	return v.SetShuffleEnabled(value)
}

func (impl *MediaPlaybackList) GetCurrentItem() (*MediaPlaybackItem, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaPlaybackList))
	defer itf.Release()
	v := (*iMediaPlaybackList)(unsafe.Pointer(itf))
	return v.GetCurrentItem()
}

func (impl *MediaPlaybackList) GetCurrentItemIndex() (uint32, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaPlaybackList))
	defer itf.Release()
	v := (*iMediaPlaybackList)(unsafe.Pointer(itf))
	return v.GetCurrentItemIndex()
}

func (impl *MediaPlaybackList) MoveNext() (*MediaPlaybackItem, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaPlaybackList))
	defer itf.Release()
	v := (*iMediaPlaybackList)(unsafe.Pointer(itf))
	return v.MoveNext()
}

func (impl *MediaPlaybackList) MovePrevious() (*MediaPlaybackItem, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaPlaybackList))
	defer itf.Release()
	v := (*iMediaPlaybackList)(unsafe.Pointer(itf))
	return v.MovePrevious()
}

func (impl *MediaPlaybackList) MoveTo(itemIndex uint32) (*MediaPlaybackItem, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaPlaybackList))
	defer itf.Release()
	v := (*iMediaPlaybackList)(unsafe.Pointer(itf))
	return v.MoveTo(itemIndex)
}

func (impl *MediaPlaybackList) GetMaxPrefetchTime() (*foundation.IReference, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaPlaybackList2))
	defer itf.Release()
	v := (*iMediaPlaybackList2)(unsafe.Pointer(itf))
	return v.GetMaxPrefetchTime()
}

func (impl *MediaPlaybackList) SetMaxPrefetchTime(value *foundation.IReference) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaPlaybackList2))
	defer itf.Release()
	v := (*iMediaPlaybackList2)(unsafe.Pointer(itf))
	return v.SetMaxPrefetchTime(value)
}

func (impl *MediaPlaybackList) GetStartingItem() (*MediaPlaybackItem, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaPlaybackList2))
	defer itf.Release()
	v := (*iMediaPlaybackList2)(unsafe.Pointer(itf))
	return v.GetStartingItem()
}

func (impl *MediaPlaybackList) SetStartingItem(value *MediaPlaybackItem) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaPlaybackList2))
	defer itf.Release()
	v := (*iMediaPlaybackList2)(unsafe.Pointer(itf))
	return v.SetStartingItem(value)
}

func (impl *MediaPlaybackList) GetShuffledItems() (*collections.IVectorView, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaPlaybackList2))
	defer itf.Release()
	v := (*iMediaPlaybackList2)(unsafe.Pointer(itf))
	return v.GetShuffledItems()
}

func (impl *MediaPlaybackList) SetShuffledItems(value *collections.IIterable) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaPlaybackList2))
	defer itf.Release()
	v := (*iMediaPlaybackList2)(unsafe.Pointer(itf))
	return v.SetShuffledItems(value)
}

func (impl *MediaPlaybackList) GetMaxPlayedItemsToKeepOpen() (*foundation.IReference, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaPlaybackList3))
	defer itf.Release()
	v := (*iMediaPlaybackList3)(unsafe.Pointer(itf))
	return v.GetMaxPlayedItemsToKeepOpen()
}

func (impl *MediaPlaybackList) SetMaxPlayedItemsToKeepOpen(value *foundation.IReference) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaPlaybackList3))
	defer itf.Release()
	v := (*iMediaPlaybackList3)(unsafe.Pointer(itf))
	return v.SetMaxPlayedItemsToKeepOpen(value)
}

const GUIDiMediaPlaybackList string = "7f77ee9c-dc42-4e26-a98d-7850df8ec925"
const SignatureiMediaPlaybackList string = "{7f77ee9c-dc42-4e26-a98d-7850df8ec925}"

type iMediaPlaybackList struct {
	ole.IInspectable
}

type iMediaPlaybackListVtbl struct {
	ole.IInspectableVtbl

	AddItemFailed            uintptr
	RemoveItemFailed         uintptr
	AddCurrentItemChanged    uintptr
	RemoveCurrentItemChanged uintptr
	AddItemOpened            uintptr
	RemoveItemOpened         uintptr
	GetItems                 uintptr
	GetAutoRepeatEnabled     uintptr
	SetAutoRepeatEnabled     uintptr
	GetShuffleEnabled        uintptr
	SetShuffleEnabled        uintptr
	GetCurrentItem           uintptr
	GetCurrentItemIndex      uintptr
	MoveNext                 uintptr
	MovePrevious             uintptr
	MoveTo                   uintptr
}

func (v *iMediaPlaybackList) VTable() *iMediaPlaybackListVtbl {
	return (*iMediaPlaybackListVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *iMediaPlaybackList) AddItemFailed(handler *foundation.TypedEventHandler) (foundation.EventRegistrationToken, error) {
	var out foundation.EventRegistrationToken
	hr, _, _ := syscall.SyscallN(
		v.VTable().AddItemFailed,
		uintptr(unsafe.Pointer(v)),       // this
		uintptr(unsafe.Pointer(handler)), // in foundation.TypedEventHandler
		uintptr(unsafe.Pointer(&out)),    // out foundation.EventRegistrationToken
	)

	if hr != 0 {
		return foundation.EventRegistrationToken{}, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMediaPlaybackList) RemoveItemFailed(token foundation.EventRegistrationToken) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().RemoveItemFailed,
		uintptr(unsafe.Pointer(v)),      // this
		uintptr(unsafe.Pointer(&token)), // in foundation.EventRegistrationToken
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iMediaPlaybackList) AddCurrentItemChanged(handler *foundation.TypedEventHandler) (foundation.EventRegistrationToken, error) {
	var out foundation.EventRegistrationToken
	hr, _, _ := syscall.SyscallN(
		v.VTable().AddCurrentItemChanged,
		uintptr(unsafe.Pointer(v)),       // this
		uintptr(unsafe.Pointer(handler)), // in foundation.TypedEventHandler
		uintptr(unsafe.Pointer(&out)),    // out foundation.EventRegistrationToken
	)

	if hr != 0 {
		return foundation.EventRegistrationToken{}, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMediaPlaybackList) RemoveCurrentItemChanged(token foundation.EventRegistrationToken) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().RemoveCurrentItemChanged,
		uintptr(unsafe.Pointer(v)),      // this
		uintptr(unsafe.Pointer(&token)), // in foundation.EventRegistrationToken
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iMediaPlaybackList) AddItemOpened(handler *foundation.TypedEventHandler) (foundation.EventRegistrationToken, error) {
	var out foundation.EventRegistrationToken
	hr, _, _ := syscall.SyscallN(
		v.VTable().AddItemOpened,
		uintptr(unsafe.Pointer(v)),       // this
		uintptr(unsafe.Pointer(handler)), // in foundation.TypedEventHandler
		uintptr(unsafe.Pointer(&out)),    // out foundation.EventRegistrationToken
	)

	if hr != 0 {
		return foundation.EventRegistrationToken{}, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMediaPlaybackList) RemoveItemOpened(token foundation.EventRegistrationToken) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().RemoveItemOpened,
		uintptr(unsafe.Pointer(v)),      // this
		uintptr(unsafe.Pointer(&token)), // in foundation.EventRegistrationToken
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iMediaPlaybackList) GetItems() (*collections.IObservableVector, error) {
	var out *collections.IObservableVector
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetItems,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out collections.IObservableVector
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMediaPlaybackList) GetAutoRepeatEnabled() (bool, error) {
	var out bool
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetAutoRepeatEnabled,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out bool
	)

	if hr != 0 {
		return false, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMediaPlaybackList) SetAutoRepeatEnabled(value bool) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetAutoRepeatEnabled,
		uintptr(unsafe.Pointer(v)),                // this
		uintptr(*(*byte)(unsafe.Pointer(&value))), // in bool
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iMediaPlaybackList) GetShuffleEnabled() (bool, error) {
	var out bool
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetShuffleEnabled,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out bool
	)

	if hr != 0 {
		return false, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMediaPlaybackList) SetShuffleEnabled(value bool) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetShuffleEnabled,
		uintptr(unsafe.Pointer(v)),                // this
		uintptr(*(*byte)(unsafe.Pointer(&value))), // in bool
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iMediaPlaybackList) GetCurrentItem() (*MediaPlaybackItem, error) {
	var out *MediaPlaybackItem
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetCurrentItem,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out MediaPlaybackItem
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMediaPlaybackList) GetCurrentItemIndex() (uint32, error) {
	var out uint32
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetCurrentItemIndex,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out uint32
	)

	if hr != 0 {
		return 0, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMediaPlaybackList) MoveNext() (*MediaPlaybackItem, error) {
	var out *MediaPlaybackItem
	hr, _, _ := syscall.SyscallN(
		v.VTable().MoveNext,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out MediaPlaybackItem
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMediaPlaybackList) MovePrevious() (*MediaPlaybackItem, error) {
	var out *MediaPlaybackItem
	hr, _, _ := syscall.SyscallN(
		v.VTable().MovePrevious,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out MediaPlaybackItem
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMediaPlaybackList) MoveTo(itemIndex uint32) (*MediaPlaybackItem, error) {
	var out *MediaPlaybackItem
	hr, _, _ := syscall.SyscallN(
		v.VTable().MoveTo,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(itemIndex),            // in uint32
		uintptr(unsafe.Pointer(&out)), // out MediaPlaybackItem
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

const GUIDiMediaPlaybackList2 string = "0e09b478-600a-4274-a14b-0b6723d0f48b"
const SignatureiMediaPlaybackList2 string = "{0e09b478-600a-4274-a14b-0b6723d0f48b}"

type iMediaPlaybackList2 struct {
	ole.IInspectable
}

type iMediaPlaybackList2Vtbl struct {
	ole.IInspectableVtbl

	GetMaxPrefetchTime uintptr
	SetMaxPrefetchTime uintptr
	GetStartingItem    uintptr
	SetStartingItem    uintptr
	GetShuffledItems   uintptr
	SetShuffledItems   uintptr
}

func (v *iMediaPlaybackList2) VTable() *iMediaPlaybackList2Vtbl {
	return (*iMediaPlaybackList2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *iMediaPlaybackList2) GetMaxPrefetchTime() (*foundation.IReference, error) {
	var out *foundation.IReference
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetMaxPrefetchTime,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out foundation.IReference
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMediaPlaybackList2) SetMaxPrefetchTime(value *foundation.IReference) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetMaxPrefetchTime,
		uintptr(unsafe.Pointer(v)),     // this
		uintptr(unsafe.Pointer(value)), // in foundation.IReference
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iMediaPlaybackList2) GetStartingItem() (*MediaPlaybackItem, error) {
	var out *MediaPlaybackItem
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetStartingItem,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out MediaPlaybackItem
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMediaPlaybackList2) SetStartingItem(value *MediaPlaybackItem) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetStartingItem,
		uintptr(unsafe.Pointer(v)),     // this
		uintptr(unsafe.Pointer(value)), // in MediaPlaybackItem
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iMediaPlaybackList2) GetShuffledItems() (*collections.IVectorView, error) {
	var out *collections.IVectorView
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetShuffledItems,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out collections.IVectorView
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMediaPlaybackList2) SetShuffledItems(value *collections.IIterable) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetShuffledItems,
		uintptr(unsafe.Pointer(v)),     // this
		uintptr(unsafe.Pointer(value)), // in collections.IIterable
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

const GUIDiMediaPlaybackList3 string = "dd24bba9-bc47-4463-aa90-c18b7e5ffde1"
const SignatureiMediaPlaybackList3 string = "{dd24bba9-bc47-4463-aa90-c18b7e5ffde1}"

type iMediaPlaybackList3 struct {
	ole.IInspectable
}

type iMediaPlaybackList3Vtbl struct {
	ole.IInspectableVtbl

	GetMaxPlayedItemsToKeepOpen uintptr
	SetMaxPlayedItemsToKeepOpen uintptr
}

func (v *iMediaPlaybackList3) VTable() *iMediaPlaybackList3Vtbl {
	return (*iMediaPlaybackList3Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *iMediaPlaybackList3) GetMaxPlayedItemsToKeepOpen() (*foundation.IReference, error) {
	var out *foundation.IReference
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetMaxPlayedItemsToKeepOpen,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out foundation.IReference
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMediaPlaybackList3) SetMaxPlayedItemsToKeepOpen(value *foundation.IReference) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetMaxPlayedItemsToKeepOpen,
		uintptr(unsafe.Pointer(v)),     // this
		uintptr(unsafe.Pointer(value)), // in foundation.IReference
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}
