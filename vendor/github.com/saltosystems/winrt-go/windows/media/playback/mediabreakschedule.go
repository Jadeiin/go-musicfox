// Code generated by winrt-go-gen. DO NOT EDIT.

//go:build windows

//nolint:all
package playback

import (
	"syscall"
	"unsafe"

	"github.com/go-ole/go-ole"
	"github.com/saltosystems/winrt-go/windows/foundation"
	"github.com/saltosystems/winrt-go/windows/foundation/collections"
)

const SignatureMediaBreakSchedule string = "rc(Windows.Media.Playback.MediaBreakSchedule;{a19a5813-98b6-41d8-83da-f971d22b7bba})"

type MediaBreakSchedule struct {
	ole.IUnknown
}

func (impl *MediaBreakSchedule) AddScheduleChanged(handler *foundation.TypedEventHandler) (foundation.EventRegistrationToken, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaBreakSchedule))
	defer itf.Release()
	v := (*iMediaBreakSchedule)(unsafe.Pointer(itf))
	return v.AddScheduleChanged(handler)
}

func (impl *MediaBreakSchedule) RemoveScheduleChanged(token foundation.EventRegistrationToken) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaBreakSchedule))
	defer itf.Release()
	v := (*iMediaBreakSchedule)(unsafe.Pointer(itf))
	return v.RemoveScheduleChanged(token)
}

func (impl *MediaBreakSchedule) InsertMidrollBreak(mediaBreak *MediaBreak) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaBreakSchedule))
	defer itf.Release()
	v := (*iMediaBreakSchedule)(unsafe.Pointer(itf))
	return v.InsertMidrollBreak(mediaBreak)
}

func (impl *MediaBreakSchedule) RemoveMidrollBreak(mediaBreak *MediaBreak) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaBreakSchedule))
	defer itf.Release()
	v := (*iMediaBreakSchedule)(unsafe.Pointer(itf))
	return v.RemoveMidrollBreak(mediaBreak)
}

func (impl *MediaBreakSchedule) GetMidrollBreaks() (*collections.IVectorView, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaBreakSchedule))
	defer itf.Release()
	v := (*iMediaBreakSchedule)(unsafe.Pointer(itf))
	return v.GetMidrollBreaks()
}

func (impl *MediaBreakSchedule) SetPrerollBreak(value *MediaBreak) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaBreakSchedule))
	defer itf.Release()
	v := (*iMediaBreakSchedule)(unsafe.Pointer(itf))
	return v.SetPrerollBreak(value)
}

func (impl *MediaBreakSchedule) GetPrerollBreak() (*MediaBreak, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaBreakSchedule))
	defer itf.Release()
	v := (*iMediaBreakSchedule)(unsafe.Pointer(itf))
	return v.GetPrerollBreak()
}

func (impl *MediaBreakSchedule) SetPostrollBreak(value *MediaBreak) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaBreakSchedule))
	defer itf.Release()
	v := (*iMediaBreakSchedule)(unsafe.Pointer(itf))
	return v.SetPostrollBreak(value)
}

func (impl *MediaBreakSchedule) GetPostrollBreak() (*MediaBreak, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaBreakSchedule))
	defer itf.Release()
	v := (*iMediaBreakSchedule)(unsafe.Pointer(itf))
	return v.GetPostrollBreak()
}

func (impl *MediaBreakSchedule) GetPlaybackItem() (*MediaPlaybackItem, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMediaBreakSchedule))
	defer itf.Release()
	v := (*iMediaBreakSchedule)(unsafe.Pointer(itf))
	return v.GetPlaybackItem()
}

const GUIDiMediaBreakSchedule string = "a19a5813-98b6-41d8-83da-f971d22b7bba"
const SignatureiMediaBreakSchedule string = "{a19a5813-98b6-41d8-83da-f971d22b7bba}"

type iMediaBreakSchedule struct {
	ole.IInspectable
}

type iMediaBreakScheduleVtbl struct {
	ole.IInspectableVtbl

	AddScheduleChanged    uintptr
	RemoveScheduleChanged uintptr
	InsertMidrollBreak    uintptr
	RemoveMidrollBreak    uintptr
	GetMidrollBreaks      uintptr
	SetPrerollBreak       uintptr
	GetPrerollBreak       uintptr
	SetPostrollBreak      uintptr
	GetPostrollBreak      uintptr
	GetPlaybackItem       uintptr
}

func (v *iMediaBreakSchedule) VTable() *iMediaBreakScheduleVtbl {
	return (*iMediaBreakScheduleVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *iMediaBreakSchedule) AddScheduleChanged(handler *foundation.TypedEventHandler) (foundation.EventRegistrationToken, error) {
	var out foundation.EventRegistrationToken
	hr, _, _ := syscall.SyscallN(
		v.VTable().AddScheduleChanged,
		uintptr(unsafe.Pointer(v)),       // this
		uintptr(unsafe.Pointer(handler)), // in foundation.TypedEventHandler
		uintptr(unsafe.Pointer(&out)),    // out foundation.EventRegistrationToken
	)

	if hr != 0 {
		return foundation.EventRegistrationToken{}, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMediaBreakSchedule) RemoveScheduleChanged(token foundation.EventRegistrationToken) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().RemoveScheduleChanged,
		uintptr(unsafe.Pointer(v)),      // this
		uintptr(unsafe.Pointer(&token)), // in foundation.EventRegistrationToken
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iMediaBreakSchedule) InsertMidrollBreak(mediaBreak *MediaBreak) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().InsertMidrollBreak,
		uintptr(unsafe.Pointer(v)),          // this
		uintptr(unsafe.Pointer(mediaBreak)), // in MediaBreak
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iMediaBreakSchedule) RemoveMidrollBreak(mediaBreak *MediaBreak) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().RemoveMidrollBreak,
		uintptr(unsafe.Pointer(v)),          // this
		uintptr(unsafe.Pointer(mediaBreak)), // in MediaBreak
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iMediaBreakSchedule) GetMidrollBreaks() (*collections.IVectorView, error) {
	var out *collections.IVectorView
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetMidrollBreaks,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out collections.IVectorView
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMediaBreakSchedule) SetPrerollBreak(value *MediaBreak) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetPrerollBreak,
		uintptr(unsafe.Pointer(v)),     // this
		uintptr(unsafe.Pointer(value)), // in MediaBreak
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iMediaBreakSchedule) GetPrerollBreak() (*MediaBreak, error) {
	var out *MediaBreak
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetPrerollBreak,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out MediaBreak
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMediaBreakSchedule) SetPostrollBreak(value *MediaBreak) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetPostrollBreak,
		uintptr(unsafe.Pointer(v)),     // this
		uintptr(unsafe.Pointer(value)), // in MediaBreak
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iMediaBreakSchedule) GetPostrollBreak() (*MediaBreak, error) {
	var out *MediaBreak
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetPostrollBreak,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out MediaBreak
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMediaBreakSchedule) GetPlaybackItem() (*MediaPlaybackItem, error) {
	var out *MediaPlaybackItem
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetPlaybackItem,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out MediaPlaybackItem
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}
