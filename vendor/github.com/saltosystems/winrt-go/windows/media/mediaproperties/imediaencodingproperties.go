// Code generated by winrt-go-gen. DO NOT EDIT.

//go:build windows

//nolint:all
package mediaproperties

import (
	"syscall"
	"unsafe"

	"github.com/go-ole/go-ole"
)

const GUIDIMediaEncodingProperties string = "b4002af6-acd4-4e5a-a24b-5d7498a8b8c4"
const SignatureIMediaEncodingProperties string = "{b4002af6-acd4-4e5a-a24b-5d7498a8b8c4}"

type IMediaEncodingProperties struct {
	ole.IInspectable
}

type IMediaEncodingPropertiesVtbl struct {
	ole.IInspectableVtbl

	GetProperties uintptr
	GetType       uintptr
	SetSubtype    uintptr
	GetSubtype    uintptr
}

func (v *IMediaEncodingProperties) VTable() *IMediaEncodingPropertiesVtbl {
	return (*IMediaEncodingPropertiesVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *IMediaEncodingProperties) GetProperties() (*MediaPropertySet, error) {
	var out *MediaPropertySet
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetProperties,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out MediaPropertySet
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IMediaEncodingProperties) GetType() (string, error) {
	var outHStr ole.HString
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetType,
		uintptr(unsafe.Pointer(v)),        // this
		uintptr(unsafe.Pointer(&outHStr)), // out string
	)

	if hr != 0 {
		return "", ole.NewError(hr)
	}

	out := outHStr.String()
	ole.DeleteHString(outHStr)
	return out, nil
}

func (v *IMediaEncodingProperties) SetSubtype(value string) error {
	valueHStr, err := ole.NewHString(value)
	if err != nil {
		return err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetSubtype,
		uintptr(unsafe.Pointer(v)), // this
		uintptr(valueHStr),         // in string
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *IMediaEncodingProperties) GetSubtype() (string, error) {
	var outHStr ole.HString
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetSubtype,
		uintptr(unsafe.Pointer(v)),        // this
		uintptr(unsafe.Pointer(&outHStr)), // out string
	)

	if hr != 0 {
		return "", ole.NewError(hr)
	}

	out := outHStr.String()
	ole.DeleteHString(outHStr)
	return out, nil
}
