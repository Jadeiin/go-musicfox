// Code generated by winrt-go-gen. DO NOT EDIT.

//go:build windows

//nolint:all
package devices

import (
	"syscall"
	"unsafe"

	"github.com/go-ole/go-ole"
	"github.com/saltosystems/winrt-go/windows/foundation"
	"github.com/saltosystems/winrt-go/windows/foundation/collections"
	"github.com/saltosystems/winrt-go/windows/media/capture"
	"github.com/saltosystems/winrt-go/windows/media/mediaproperties"
)

const GUIDIMediaDeviceController string = "f6f8f5ce-209a-48fb-86fc-d44578f317e6"
const SignatureIMediaDeviceController string = "{f6f8f5ce-209a-48fb-86fc-d44578f317e6}"

type IMediaDeviceController struct {
	ole.IInspectable
}

type IMediaDeviceControllerVtbl struct {
	ole.IInspectableVtbl

	GetAvailableMediaStreamProperties uintptr
	GetMediaStreamProperties          uintptr
	SetMediaStreamPropertiesAsync     uintptr
}

func (v *IMediaDeviceController) VTable() *IMediaDeviceControllerVtbl {
	return (*IMediaDeviceControllerVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *IMediaDeviceController) GetAvailableMediaStreamProperties(mediaStreamType capture.MediaStreamType) (*collections.IVectorView, error) {
	var out *collections.IVectorView
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetAvailableMediaStreamProperties,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(mediaStreamType),      // in capture.MediaStreamType
		uintptr(unsafe.Pointer(&out)), // out collections.IVectorView
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IMediaDeviceController) GetMediaStreamProperties(mediaStreamType capture.MediaStreamType) (*mediaproperties.IMediaEncodingProperties, error) {
	var out *mediaproperties.IMediaEncodingProperties
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetMediaStreamProperties,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(mediaStreamType),      // in capture.MediaStreamType
		uintptr(unsafe.Pointer(&out)), // out mediaproperties.IMediaEncodingProperties
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IMediaDeviceController) SetMediaStreamPropertiesAsync(mediaStreamType capture.MediaStreamType, mediaEncodingProperties *mediaproperties.IMediaEncodingProperties) (*foundation.IAsyncAction, error) {
	var out *foundation.IAsyncAction
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetMediaStreamPropertiesAsync,
		uintptr(unsafe.Pointer(v)),                       // this
		uintptr(mediaStreamType),                         // in capture.MediaStreamType
		uintptr(unsafe.Pointer(mediaEncodingProperties)), // in mediaproperties.IMediaEncodingProperties
		uintptr(unsafe.Pointer(&out)),                    // out foundation.IAsyncAction
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}
