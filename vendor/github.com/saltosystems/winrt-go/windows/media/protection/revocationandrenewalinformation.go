// Code generated by winrt-go-gen. DO NOT EDIT.

//go:build windows

//nolint:all
package protection

import (
	"syscall"
	"unsafe"

	"github.com/go-ole/go-ole"
	"github.com/saltosystems/winrt-go/windows/foundation/collections"
)

const SignatureRevocationAndRenewalInformation string = "rc(Windows.Media.Protection.RevocationAndRenewalInformation;{f3a1937b-2501-439e-a6e7-6fc95e175fcf})"

type RevocationAndRenewalInformation struct {
	ole.IUnknown
}

func (impl *RevocationAndRenewalInformation) GetItems() (*collections.IVector, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiRevocationAndRenewalInformation))
	defer itf.Release()
	v := (*iRevocationAndRenewalInformation)(unsafe.Pointer(itf))
	return v.GetItems()
}

const GUIDiRevocationAndRenewalInformation string = "f3a1937b-2501-439e-a6e7-6fc95e175fcf"
const SignatureiRevocationAndRenewalInformation string = "{f3a1937b-2501-439e-a6e7-6fc95e175fcf}"

type iRevocationAndRenewalInformation struct {
	ole.IInspectable
}

type iRevocationAndRenewalInformationVtbl struct {
	ole.IInspectableVtbl

	GetItems uintptr
}

func (v *iRevocationAndRenewalInformation) VTable() *iRevocationAndRenewalInformationVtbl {
	return (*iRevocationAndRenewalInformationVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *iRevocationAndRenewalInformation) GetItems() (*collections.IVector, error) {
	var out *collections.IVector
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetItems,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out collections.IVector
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}
