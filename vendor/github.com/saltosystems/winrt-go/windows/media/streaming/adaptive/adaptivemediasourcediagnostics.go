// Code generated by winrt-go-gen. DO NOT EDIT.

//go:build windows

//nolint:all
package adaptive

import (
	"syscall"
	"unsafe"

	"github.com/go-ole/go-ole"
	"github.com/saltosystems/winrt-go/windows/foundation"
)

const SignatureAdaptiveMediaSourceDiagnostics string = "rc(Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnostics;{9b24ee68-962e-448c-aebf-b29b56098e23})"

type AdaptiveMediaSourceDiagnostics struct {
	ole.IUnknown
}

func (impl *AdaptiveMediaSourceDiagnostics) AddDiagnosticAvailable(handler *foundation.TypedEventHandler) (foundation.EventRegistrationToken, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiAdaptiveMediaSourceDiagnostics))
	defer itf.Release()
	v := (*iAdaptiveMediaSourceDiagnostics)(unsafe.Pointer(itf))
	return v.AddDiagnosticAvailable(handler)
}

func (impl *AdaptiveMediaSourceDiagnostics) RemoveDiagnosticAvailable(token foundation.EventRegistrationToken) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiAdaptiveMediaSourceDiagnostics))
	defer itf.Release()
	v := (*iAdaptiveMediaSourceDiagnostics)(unsafe.Pointer(itf))
	return v.RemoveDiagnosticAvailable(token)
}

const GUIDiAdaptiveMediaSourceDiagnostics string = "9b24ee68-962e-448c-aebf-b29b56098e23"
const SignatureiAdaptiveMediaSourceDiagnostics string = "{9b24ee68-962e-448c-aebf-b29b56098e23}"

type iAdaptiveMediaSourceDiagnostics struct {
	ole.IInspectable
}

type iAdaptiveMediaSourceDiagnosticsVtbl struct {
	ole.IInspectableVtbl

	AddDiagnosticAvailable    uintptr
	RemoveDiagnosticAvailable uintptr
}

func (v *iAdaptiveMediaSourceDiagnostics) VTable() *iAdaptiveMediaSourceDiagnosticsVtbl {
	return (*iAdaptiveMediaSourceDiagnosticsVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *iAdaptiveMediaSourceDiagnostics) AddDiagnosticAvailable(handler *foundation.TypedEventHandler) (foundation.EventRegistrationToken, error) {
	var out foundation.EventRegistrationToken
	hr, _, _ := syscall.SyscallN(
		v.VTable().AddDiagnosticAvailable,
		uintptr(unsafe.Pointer(v)),       // this
		uintptr(unsafe.Pointer(handler)), // in foundation.TypedEventHandler
		uintptr(unsafe.Pointer(&out)),    // out foundation.EventRegistrationToken
	)

	if hr != 0 {
		return foundation.EventRegistrationToken{}, ole.NewError(hr)
	}

	return out, nil
}

func (v *iAdaptiveMediaSourceDiagnostics) RemoveDiagnosticAvailable(token foundation.EventRegistrationToken) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().RemoveDiagnosticAvailable,
		uintptr(unsafe.Pointer(v)),      // this
		uintptr(unsafe.Pointer(&token)), // in foundation.EventRegistrationToken
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}
