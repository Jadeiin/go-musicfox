// Code generated by winrt-go-gen. DO NOT EDIT.

//go:build windows

//nolint:all
package core

import (
	"syscall"
	"unsafe"

	"github.com/go-ole/go-ole"
	"github.com/saltosystems/winrt-go/windows/foundation"
	"github.com/saltosystems/winrt-go/windows/foundation/collections"
	"github.com/saltosystems/winrt-go/windows/storage/streams"
)

const SignatureMseSourceBuffer string = "rc(Windows.Media.Core.MseSourceBuffer;{0c1aa3e3-df8d-4079-a3fe-6849184b4e2f})"

type MseSourceBuffer struct {
	ole.IUnknown
}

func (impl *MseSourceBuffer) AddUpdateStarting(handler *foundation.TypedEventHandler) (foundation.EventRegistrationToken, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMseSourceBuffer))
	defer itf.Release()
	v := (*iMseSourceBuffer)(unsafe.Pointer(itf))
	return v.AddUpdateStarting(handler)
}

func (impl *MseSourceBuffer) RemoveUpdateStarting(token foundation.EventRegistrationToken) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMseSourceBuffer))
	defer itf.Release()
	v := (*iMseSourceBuffer)(unsafe.Pointer(itf))
	return v.RemoveUpdateStarting(token)
}

func (impl *MseSourceBuffer) AddUpdated(handler *foundation.TypedEventHandler) (foundation.EventRegistrationToken, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMseSourceBuffer))
	defer itf.Release()
	v := (*iMseSourceBuffer)(unsafe.Pointer(itf))
	return v.AddUpdated(handler)
}

func (impl *MseSourceBuffer) RemoveUpdated(token foundation.EventRegistrationToken) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMseSourceBuffer))
	defer itf.Release()
	v := (*iMseSourceBuffer)(unsafe.Pointer(itf))
	return v.RemoveUpdated(token)
}

func (impl *MseSourceBuffer) AddUpdateEnded(handler *foundation.TypedEventHandler) (foundation.EventRegistrationToken, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMseSourceBuffer))
	defer itf.Release()
	v := (*iMseSourceBuffer)(unsafe.Pointer(itf))
	return v.AddUpdateEnded(handler)
}

func (impl *MseSourceBuffer) RemoveUpdateEnded(token foundation.EventRegistrationToken) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMseSourceBuffer))
	defer itf.Release()
	v := (*iMseSourceBuffer)(unsafe.Pointer(itf))
	return v.RemoveUpdateEnded(token)
}

func (impl *MseSourceBuffer) AddErrorOccurred(handler *foundation.TypedEventHandler) (foundation.EventRegistrationToken, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMseSourceBuffer))
	defer itf.Release()
	v := (*iMseSourceBuffer)(unsafe.Pointer(itf))
	return v.AddErrorOccurred(handler)
}

func (impl *MseSourceBuffer) RemoveErrorOccurred(token foundation.EventRegistrationToken) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMseSourceBuffer))
	defer itf.Release()
	v := (*iMseSourceBuffer)(unsafe.Pointer(itf))
	return v.RemoveErrorOccurred(token)
}

func (impl *MseSourceBuffer) AddAborted(handler *foundation.TypedEventHandler) (foundation.EventRegistrationToken, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMseSourceBuffer))
	defer itf.Release()
	v := (*iMseSourceBuffer)(unsafe.Pointer(itf))
	return v.AddAborted(handler)
}

func (impl *MseSourceBuffer) RemoveAborted(token foundation.EventRegistrationToken) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMseSourceBuffer))
	defer itf.Release()
	v := (*iMseSourceBuffer)(unsafe.Pointer(itf))
	return v.RemoveAborted(token)
}

func (impl *MseSourceBuffer) GetMode() (MseAppendMode, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMseSourceBuffer))
	defer itf.Release()
	v := (*iMseSourceBuffer)(unsafe.Pointer(itf))
	return v.GetMode()
}

func (impl *MseSourceBuffer) SetMode(value MseAppendMode) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMseSourceBuffer))
	defer itf.Release()
	v := (*iMseSourceBuffer)(unsafe.Pointer(itf))
	return v.SetMode(value)
}

func (impl *MseSourceBuffer) GetIsUpdating() (bool, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMseSourceBuffer))
	defer itf.Release()
	v := (*iMseSourceBuffer)(unsafe.Pointer(itf))
	return v.GetIsUpdating()
}

func (impl *MseSourceBuffer) GetBuffered() (*collections.IVectorView, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMseSourceBuffer))
	defer itf.Release()
	v := (*iMseSourceBuffer)(unsafe.Pointer(itf))
	return v.GetBuffered()
}

func (impl *MseSourceBuffer) GetTimestampOffset() (foundation.TimeSpan, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMseSourceBuffer))
	defer itf.Release()
	v := (*iMseSourceBuffer)(unsafe.Pointer(itf))
	return v.GetTimestampOffset()
}

func (impl *MseSourceBuffer) SetTimestampOffset(value foundation.TimeSpan) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMseSourceBuffer))
	defer itf.Release()
	v := (*iMseSourceBuffer)(unsafe.Pointer(itf))
	return v.SetTimestampOffset(value)
}

func (impl *MseSourceBuffer) GetAppendWindowStart() (foundation.TimeSpan, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMseSourceBuffer))
	defer itf.Release()
	v := (*iMseSourceBuffer)(unsafe.Pointer(itf))
	return v.GetAppendWindowStart()
}

func (impl *MseSourceBuffer) SetAppendWindowStart(value foundation.TimeSpan) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMseSourceBuffer))
	defer itf.Release()
	v := (*iMseSourceBuffer)(unsafe.Pointer(itf))
	return v.SetAppendWindowStart(value)
}

func (impl *MseSourceBuffer) GetAppendWindowEnd() (*foundation.IReference, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMseSourceBuffer))
	defer itf.Release()
	v := (*iMseSourceBuffer)(unsafe.Pointer(itf))
	return v.GetAppendWindowEnd()
}

func (impl *MseSourceBuffer) SetAppendWindowEnd(value *foundation.IReference) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMseSourceBuffer))
	defer itf.Release()
	v := (*iMseSourceBuffer)(unsafe.Pointer(itf))
	return v.SetAppendWindowEnd(value)
}

func (impl *MseSourceBuffer) AppendBuffer(buffer *streams.IBuffer) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMseSourceBuffer))
	defer itf.Release()
	v := (*iMseSourceBuffer)(unsafe.Pointer(itf))
	return v.AppendBuffer(buffer)
}

func (impl *MseSourceBuffer) AppendStream(stream *streams.IInputStream) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMseSourceBuffer))
	defer itf.Release()
	v := (*iMseSourceBuffer)(unsafe.Pointer(itf))
	return v.AppendStream(stream)
}

func (impl *MseSourceBuffer) AppendStreamMaxSize(stream *streams.IInputStream, maxSize uint64) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMseSourceBuffer))
	defer itf.Release()
	v := (*iMseSourceBuffer)(unsafe.Pointer(itf))
	return v.AppendStreamMaxSize(stream, maxSize)
}

func (impl *MseSourceBuffer) Abort() error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMseSourceBuffer))
	defer itf.Release()
	v := (*iMseSourceBuffer)(unsafe.Pointer(itf))
	return v.Abort()
}

func (impl *MseSourceBuffer) Remove(start foundation.TimeSpan, end *foundation.IReference) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiMseSourceBuffer))
	defer itf.Release()
	v := (*iMseSourceBuffer)(unsafe.Pointer(itf))
	return v.Remove(start, end)
}

const GUIDiMseSourceBuffer string = "0c1aa3e3-df8d-4079-a3fe-6849184b4e2f"
const SignatureiMseSourceBuffer string = "{0c1aa3e3-df8d-4079-a3fe-6849184b4e2f}"

type iMseSourceBuffer struct {
	ole.IInspectable
}

type iMseSourceBufferVtbl struct {
	ole.IInspectableVtbl

	AddUpdateStarting    uintptr
	RemoveUpdateStarting uintptr
	AddUpdated           uintptr
	RemoveUpdated        uintptr
	AddUpdateEnded       uintptr
	RemoveUpdateEnded    uintptr
	AddErrorOccurred     uintptr
	RemoveErrorOccurred  uintptr
	AddAborted           uintptr
	RemoveAborted        uintptr
	GetMode              uintptr
	SetMode              uintptr
	GetIsUpdating        uintptr
	GetBuffered          uintptr
	GetTimestampOffset   uintptr
	SetTimestampOffset   uintptr
	GetAppendWindowStart uintptr
	SetAppendWindowStart uintptr
	GetAppendWindowEnd   uintptr
	SetAppendWindowEnd   uintptr
	AppendBuffer         uintptr
	AppendStream         uintptr
	AppendStreamMaxSize  uintptr
	Abort                uintptr
	Remove               uintptr
}

func (v *iMseSourceBuffer) VTable() *iMseSourceBufferVtbl {
	return (*iMseSourceBufferVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *iMseSourceBuffer) AddUpdateStarting(handler *foundation.TypedEventHandler) (foundation.EventRegistrationToken, error) {
	var out foundation.EventRegistrationToken
	hr, _, _ := syscall.SyscallN(
		v.VTable().AddUpdateStarting,
		uintptr(unsafe.Pointer(v)),       // this
		uintptr(unsafe.Pointer(handler)), // in foundation.TypedEventHandler
		uintptr(unsafe.Pointer(&out)),    // out foundation.EventRegistrationToken
	)

	if hr != 0 {
		return foundation.EventRegistrationToken{}, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMseSourceBuffer) RemoveUpdateStarting(token foundation.EventRegistrationToken) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().RemoveUpdateStarting,
		uintptr(unsafe.Pointer(v)),      // this
		uintptr(unsafe.Pointer(&token)), // in foundation.EventRegistrationToken
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iMseSourceBuffer) AddUpdated(handler *foundation.TypedEventHandler) (foundation.EventRegistrationToken, error) {
	var out foundation.EventRegistrationToken
	hr, _, _ := syscall.SyscallN(
		v.VTable().AddUpdated,
		uintptr(unsafe.Pointer(v)),       // this
		uintptr(unsafe.Pointer(handler)), // in foundation.TypedEventHandler
		uintptr(unsafe.Pointer(&out)),    // out foundation.EventRegistrationToken
	)

	if hr != 0 {
		return foundation.EventRegistrationToken{}, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMseSourceBuffer) RemoveUpdated(token foundation.EventRegistrationToken) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().RemoveUpdated,
		uintptr(unsafe.Pointer(v)),      // this
		uintptr(unsafe.Pointer(&token)), // in foundation.EventRegistrationToken
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iMseSourceBuffer) AddUpdateEnded(handler *foundation.TypedEventHandler) (foundation.EventRegistrationToken, error) {
	var out foundation.EventRegistrationToken
	hr, _, _ := syscall.SyscallN(
		v.VTable().AddUpdateEnded,
		uintptr(unsafe.Pointer(v)),       // this
		uintptr(unsafe.Pointer(handler)), // in foundation.TypedEventHandler
		uintptr(unsafe.Pointer(&out)),    // out foundation.EventRegistrationToken
	)

	if hr != 0 {
		return foundation.EventRegistrationToken{}, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMseSourceBuffer) RemoveUpdateEnded(token foundation.EventRegistrationToken) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().RemoveUpdateEnded,
		uintptr(unsafe.Pointer(v)),      // this
		uintptr(unsafe.Pointer(&token)), // in foundation.EventRegistrationToken
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iMseSourceBuffer) AddErrorOccurred(handler *foundation.TypedEventHandler) (foundation.EventRegistrationToken, error) {
	var out foundation.EventRegistrationToken
	hr, _, _ := syscall.SyscallN(
		v.VTable().AddErrorOccurred,
		uintptr(unsafe.Pointer(v)),       // this
		uintptr(unsafe.Pointer(handler)), // in foundation.TypedEventHandler
		uintptr(unsafe.Pointer(&out)),    // out foundation.EventRegistrationToken
	)

	if hr != 0 {
		return foundation.EventRegistrationToken{}, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMseSourceBuffer) RemoveErrorOccurred(token foundation.EventRegistrationToken) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().RemoveErrorOccurred,
		uintptr(unsafe.Pointer(v)),      // this
		uintptr(unsafe.Pointer(&token)), // in foundation.EventRegistrationToken
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iMseSourceBuffer) AddAborted(handler *foundation.TypedEventHandler) (foundation.EventRegistrationToken, error) {
	var out foundation.EventRegistrationToken
	hr, _, _ := syscall.SyscallN(
		v.VTable().AddAborted,
		uintptr(unsafe.Pointer(v)),       // this
		uintptr(unsafe.Pointer(handler)), // in foundation.TypedEventHandler
		uintptr(unsafe.Pointer(&out)),    // out foundation.EventRegistrationToken
	)

	if hr != 0 {
		return foundation.EventRegistrationToken{}, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMseSourceBuffer) RemoveAborted(token foundation.EventRegistrationToken) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().RemoveAborted,
		uintptr(unsafe.Pointer(v)),      // this
		uintptr(unsafe.Pointer(&token)), // in foundation.EventRegistrationToken
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iMseSourceBuffer) GetMode() (MseAppendMode, error) {
	var out MseAppendMode
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetMode,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out MseAppendMode
	)

	if hr != 0 {
		return MseAppendModeSegments, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMseSourceBuffer) SetMode(value MseAppendMode) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetMode,
		uintptr(unsafe.Pointer(v)), // this
		uintptr(value),             // in MseAppendMode
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iMseSourceBuffer) GetIsUpdating() (bool, error) {
	var out bool
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetIsUpdating,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out bool
	)

	if hr != 0 {
		return false, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMseSourceBuffer) GetBuffered() (*collections.IVectorView, error) {
	var out *collections.IVectorView
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetBuffered,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out collections.IVectorView
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMseSourceBuffer) GetTimestampOffset() (foundation.TimeSpan, error) {
	var out foundation.TimeSpan
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetTimestampOffset,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out foundation.TimeSpan
	)

	if hr != 0 {
		return foundation.TimeSpan{}, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMseSourceBuffer) SetTimestampOffset(value foundation.TimeSpan) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetTimestampOffset,
		uintptr(unsafe.Pointer(v)),      // this
		uintptr(unsafe.Pointer(&value)), // in foundation.TimeSpan
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iMseSourceBuffer) GetAppendWindowStart() (foundation.TimeSpan, error) {
	var out foundation.TimeSpan
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetAppendWindowStart,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out foundation.TimeSpan
	)

	if hr != 0 {
		return foundation.TimeSpan{}, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMseSourceBuffer) SetAppendWindowStart(value foundation.TimeSpan) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetAppendWindowStart,
		uintptr(unsafe.Pointer(v)),      // this
		uintptr(unsafe.Pointer(&value)), // in foundation.TimeSpan
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iMseSourceBuffer) GetAppendWindowEnd() (*foundation.IReference, error) {
	var out *foundation.IReference
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetAppendWindowEnd,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out foundation.IReference
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iMseSourceBuffer) SetAppendWindowEnd(value *foundation.IReference) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetAppendWindowEnd,
		uintptr(unsafe.Pointer(v)),     // this
		uintptr(unsafe.Pointer(value)), // in foundation.IReference
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iMseSourceBuffer) AppendBuffer(buffer *streams.IBuffer) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().AppendBuffer,
		uintptr(unsafe.Pointer(v)),      // this
		uintptr(unsafe.Pointer(buffer)), // in streams.IBuffer
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iMseSourceBuffer) AppendStream(stream *streams.IInputStream) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().AppendStream,
		uintptr(unsafe.Pointer(v)),      // this
		uintptr(unsafe.Pointer(stream)), // in streams.IInputStream
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iMseSourceBuffer) AppendStreamMaxSize(stream *streams.IInputStream, maxSize uint64) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().AppendStreamMaxSize,
		uintptr(unsafe.Pointer(v)),      // this
		uintptr(unsafe.Pointer(stream)), // in streams.IInputStream
		uintptr(maxSize),                // in uint64
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iMseSourceBuffer) Abort() error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().Abort,
		uintptr(unsafe.Pointer(v)), // this
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iMseSourceBuffer) Remove(start foundation.TimeSpan, end *foundation.IReference) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().Remove,
		uintptr(unsafe.Pointer(v)),      // this
		uintptr(unsafe.Pointer(&start)), // in foundation.TimeSpan
		uintptr(unsafe.Pointer(end)),    // in foundation.IReference
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}
