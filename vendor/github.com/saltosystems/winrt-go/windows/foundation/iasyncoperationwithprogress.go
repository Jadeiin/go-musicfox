// Code generated by winrt-go-gen. DO NOT EDIT.

//go:build windows

//nolint:all
package foundation

import (
	"syscall"
	"unsafe"

	"github.com/go-ole/go-ole"
)

const GUIDIAsyncOperationWithProgress string = "b5d036d7-e297-498f-ba60-0289e76e23dd"
const SignatureIAsyncOperationWithProgress string = "{b5d036d7-e297-498f-ba60-0289e76e23dd}"

type IAsyncOperationWithProgress struct {
	ole.IInspectable
}

type IAsyncOperationWithProgressVtbl struct {
	ole.IInspectableVtbl

	SetProgress  uintptr
	GetProgress  uintptr
	SetCompleted uintptr
	GetCompleted uintptr
	GetResults   uintptr
}

func (v *IAsyncOperationWithProgress) VTable() *IAsyncOperationWithProgressVtbl {
	return (*IAsyncOperationWithProgressVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *IAsyncOperationWithProgress) SetProgress(handler *AsyncOperationProgressHandler) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetProgress,
		uintptr(unsafe.Pointer(v)),       // this
		uintptr(unsafe.Pointer(handler)), // in AsyncOperationProgressHandler
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *IAsyncOperationWithProgress) GetProgress() (*AsyncOperationProgressHandler, error) {
	var out *AsyncOperationProgressHandler
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetProgress,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out AsyncOperationProgressHandler
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IAsyncOperationWithProgress) SetCompleted(handler *AsyncOperationWithProgressCompletedHandler) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetCompleted,
		uintptr(unsafe.Pointer(v)),       // this
		uintptr(unsafe.Pointer(handler)), // in AsyncOperationWithProgressCompletedHandler
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *IAsyncOperationWithProgress) GetCompleted() (*AsyncOperationWithProgressCompletedHandler, error) {
	var out *AsyncOperationWithProgressCompletedHandler
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetCompleted,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out AsyncOperationWithProgressCompletedHandler
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IAsyncOperationWithProgress) GetResults() (unsafe.Pointer, error) {
	var out unsafe.Pointer
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetResults,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out unsafe.Pointer
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}
