// Code generated by winrt-go-gen. DO NOT EDIT.

//go:build windows

//nolint:all
package collections

import (
	"syscall"
	"unsafe"

	"github.com/go-ole/go-ole"
)

const GUIDIMapView string = "e480ce40-a338-4ada-adcf-272272e48cb9"
const SignatureIMapView string = "{e480ce40-a338-4ada-adcf-272272e48cb9}"

type IMapView struct {
	ole.IInspectable
}

type IMapViewVtbl struct {
	ole.IInspectableVtbl

	Lookup  uintptr
	GetSize uintptr
	HasKey  uintptr
	Split   uintptr
}

func (v *IMapView) VTable() *IMapViewVtbl {
	return (*IMapViewVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *IMapView) Lookup(key unsafe.Pointer) (unsafe.Pointer, error) {
	var out unsafe.Pointer
	hr, _, _ := syscall.SyscallN(
		v.VTable().Lookup,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(key),                  // in unsafe.Pointer
		uintptr(unsafe.Pointer(&out)), // out unsafe.Pointer
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IMapView) GetSize() (uint32, error) {
	var out uint32
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetSize,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out uint32
	)

	if hr != 0 {
		return 0, ole.NewError(hr)
	}

	return out, nil
}

func (v *IMapView) HasKey(key unsafe.Pointer) (bool, error) {
	var out bool
	hr, _, _ := syscall.SyscallN(
		v.VTable().HasKey,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(key),                  // in unsafe.Pointer
		uintptr(unsafe.Pointer(&out)), // out bool
	)

	if hr != 0 {
		return false, ole.NewError(hr)
	}

	return out, nil
}

func (v *IMapView) Split() (*IMapView, *IMapView, error) {
	var first *IMapView
	var second *IMapView
	hr, _, _ := syscall.SyscallN(
		v.VTable().Split,
		uintptr(unsafe.Pointer(v)),       // this
		uintptr(unsafe.Pointer(&first)),  // out IMapView
		uintptr(unsafe.Pointer(&second)), // out IMapView
	)

	if hr != 0 {
		return nil, nil, ole.NewError(hr)
	}

	return first, second, nil
}
